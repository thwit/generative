from __future__ import division
import math

# draws straight lines pencil-like
# Source / inspiration:
# Author: antagoon
# URL:    https://editor.p5js.org/antigoon/sketches/55m6cqyIp
class PenLine:
    # Takes two PVector objects defining start and end point
    def __init__(self, v1, v2):
        self.v1 = v1
        self.v2 = v2
        
    def draw(self, pg, col):
        x1, y1, x2, y2 = float(self.v1.x), float(self.v1.y), float(self.v2.x), float(self.v2.y)
        x_length = abs(x1-x2)
        y_length = abs(y1-y2)
        div_num = max(x_length, y_length)
        if div_num == 0:
            return
        div_x = abs(x2-x1)/div_num
        div_y = abs(y2-y1)/div_num
        
        div_num = int(div_num)



        for i in range(div_num+1):
            if(x1<x2):
                new_x = x1 + div_x * i
            else:
                new_x = x1 - div_x * i
            if y1 < y2:
                new_y = y1 + div_y * i
            else:
                new_y = y1 - div_y * i
                
            self._random_dots(new_x, new_y, pg, col)
        
    def _random_dots(self, dot_x, dot_y, pg, col):
    	pg.noStroke()
    	pg.fill(*col)

        dmi = 10
        rand = 1.25
        for _ in range(dmi):
            dir_x = random(-rand, rand)
            dir_y = random(-rand, rand)
            new_x = dot_x+dir_x
            new_y = dot_y+dir_y
            pg.circle(new_x, new_y, 1)


class PenLine2:
    def __init__(self):
        pass

    # Takes two PVector objects defining start and end point
    def line(self, v1, v2, col, pg):
        steps = int((v1-v2).mag() / 5)
        
        # Start x and y coordinate
        x_ = lerp(v1.x, v2.x, 0)
        y_ = lerp(v1.y, v2.y, 0)
        
        pg.strokeWeight(2)
        pg.stroke(*col)

        for i in range(1, steps + 1):
            t = i / steps
            x = lerp(v1.x, v2.x, t) + random(-0.5, 0.5)
            y = lerp(v1.y, v2.y, t) + random(-0.5, 0.5)

            if random(1) > 0.25:
                PenLine(PVector(x,y), PVector(x_, y_)).draw(pg, col)

            x_ = x
            y_ = y

    def circle(self, c, r, col, pg):
        n = int(2 * math.pi * r / 5)
        x_ = c.x
        y_ = c.y
        rand = 0.7
        points = [(math.cos(2*math.pi/n*x)*r + x_ + random(-rand, rand), math.sin(2*math.pi/n*x)*r + y_ + random(-rand, rand)) for x in range(0,n+1)]

        x_, y_ = points[0]

        for x, y in points[1:]:
            if random(1) > 0.25:
                PenLine(PVector(x,y), PVector(x_, y_)).draw(pg, col)

            x_ = x
            y_ = y
